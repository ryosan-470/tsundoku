<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>distributed systems on ryosan-470の積ん読ブログ</title>
    <link>https://ryosan-470.github.io/tsundoku/tags/distributed-systems/</link>
    <description>Recent content in distributed systems on ryosan-470の積ん読ブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 24 Nov 2019 19:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://ryosan-470.github.io/tsundoku/tags/distributed-systems/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分散システム入門</title>
      <link>https://ryosan-470.github.io/tsundoku/posts/introfuction_of_distributed_systems/</link>
      <pubDate>Sun, 24 Nov 2019 19:00:00 +0900</pubDate>
      
      <guid>https://ryosan-470.github.io/tsundoku/posts/introfuction_of_distributed_systems/</guid>
      <description>A Thorough Introduction to Distributed Systems https://medium.com/free-code-camp/a-thorough-introduction-to-distributed-systems-3b91562c9b3c
はじめに 世界における技術のますますの発展とともに分散システムもますます広がってきました。それらはコンピューターサイエンスの分野において複雑で巨大なものとなっています。
この記事では分散システムの基本的な方法について紹介し、システムの深い詳細を紹介するのではなく分散システムの異なるカテゴリに関して垣間見ることになります。
分散システムとはなにか 分散システムの最も単純な定義はエンドユーザーには1つのコンピュータのように見えるように連携して動作するコンピュータの集合です。 これらのマシンは状態を共有しており、同時に動作し、システム全体への影響を及ぼさず独立して障害を起こします。 私はあなたがそれを全てよりよく理解できるようにシステムを分散させる例を通して段階的に取り組むことを提案します。
データベースを使ってみましょう。従来のデータベースは情報を取得/挿入したいときはいつでも1つのマシンのファイルシステムに保存しているため、そのマシンと直接やり取りをします。 このデータベースシステムでの分散とは、同じときに複数のマシンでこのデータベースを動かすことになります。ユーザーは自分が選択したどのマシンともやりとりでき、単一のマシンと会話していないことを伝えることはできません。もしノード 1にレコードを挿入すると、ノード3はそのレコードを返すことができます。
どうして分散システムなのか システムは常に必要に応じて分散されます。問題の真実は分散システムの管理は落とし穴と地雷でいっぱいな複雑なトピックであるということです。デプロイや維持、分散システムのデバッグは頭痛の種であり、どうしてそちらに行くのでしょうか?
分散システムが可能にすることは水平方向へのスケール です。1つのデータベース・サーバーがある例に戻ってみると、更に多くのトラフィックをさばくための唯一の方法はデータベースが動いているハードウェアをアップグレードすることだけでした。これを 垂直方向のスケーリング と呼びます。
水平方向のスケーリング はハードウェアをアップグレードするということではなく単に更に多くのコンピューターを追加するということです。
特定のしきい値を超えた後の垂直方向のスケーリングよりも大幅に安価ですが、それが優先されるような主なケースではありません。
垂直方向のスケーリングはパフォーマンスを最新のハードウェアの性能まで引き上げることができるだけです。この性能は中程度から大きなワークロードを抱えるテクノロジー企業にとっては不十分であるということが証明されています。
水平方向のスケーリングにおける最善なことはスケールできる量に制限がないということです。つまりいつでもパフォーマンスが劣化した環境に他のマシンを追加することで無限の可能性を秘めた性能を引き出すことができます。
分散システムから得られる利点は簡単なスケーリングだけではありません。フォールトトレランス と低遅延 も同様に重要です。
 フォールトトレランス 2つのデータセンターにまたがって10台のマシンのクラスターは本質的に単一のマシンよりも耐性があります。もし1つのデータセンターが焼失してもアプリケーションは稼働し続けられます。 低遅延 世界を旅するネットワークパケットの時間は光の速度という制約が物理的に存在します。例えばニューヨークとシドニー間の光ファイバーケーブル内の往復時間 (RTT) は最も短くて160msです。分散システムは2つの街にノードをおき、近いノードからトラフィックを返すことができます。  しかし分散システムを動かすためには具体的に同じ時間で複数のコンピューターに動かし、問題が起きた場合に対処するソフトウェアが必要です。これは簡単ではありません。
データベースをスケーリングする Webアプリケーションが大変有名になったと想像してみてください。さらに私達のデータベースが扱うクエリが秒間で2倍になったと想像してみてください。アプリケーションはすぐさまパフォーマンスが低下し、ユーザーはそれに気づくでしょう。
では一緒にデータベースをスケールアップし高負荷に耐えられるようにしていきましょう。
典型的なWebアプリケーションでは新しい情報を挿入したり古い情報を修正するよりも情報を読み取ることのほうが多いです。
読み取りパフォーマンスを向上する方法としてマスタースレーブレプリケーション 戦略と呼ばれる方法があります。ここでは新しく2つのデータベースサーバーをつくりメインのものと同期させます。これら2つのインスタンスからのみ読み取るようにします。
情報を修正または挿入するときはいつでもマスターデータベースに接続しに行きます。それは順番に変更をスレーブに非同期的に通知しデータを保存します。
おめでとうございます。ついに3倍もの読み込みクエリを実行できるようになりました。これでよいでしょうか?
分散システムのカテゴリ 落とし穴 さて、データベースのACID 保証のうちC で表される一貫性が抜け落ちています。 ご存知の通り、ここには新しいレコードをデータベースにインサートしてすぐにそれを取得する読み込みクエリを実行すると何も返ってこないという問題があります。
マスターからスレーブへの新しい情報の伝搬は瞬時には行われません。実際には古くなった情報を取得できる時間枠があります。そうでない場合は、データが伝搬されるのを同期的に待つ必要があるため書き込みパフォーマンスが低下します。
分散システムにはいくつかのトレードオフがあります。特にこの問題は適切に拡張したいときに対処しなければならない問題です。
スケールアップを継続する スレーブデータベースを利用するという手法では、ある程度の範囲まで読み込みトラフィックを水平にスケールアップすることができます。これは大変素晴らしいのでしが、書き込みトラフィックにはどこかで上限があることになります。なぜなら書き込みは1台でしか対応できていないからです。
ここにはあまり選択肢がありません。書き込みトラフィックを処理することができないために書き込みトラフィックを複数のサーバーに分割する必要があります。
1つの方法はマルチマスターレプリケーション戦略を取ることです。スレーブからは読み込むだけだったことの代わりに、複数のマスターノードを持ち、読み書きに対応させるようにします。ただ残念なことに重複を作成してしまうという (例えば2つのレコードを同じIDでインサートする)複雑な問題が発生します。
もう一つの方法としてシャーディング (またはパーティショニング)とよばれる方法を見てみましょう。
サーバーを複数の小さなサーバー二分割してシャーディングしたものをシャード と呼びます。これらのシャードはすべて異なるレコードを持っています。なので何のレコードをどのシャードにするかというルールを作成します。データが一様に分散されるようにルールを作ることは大変重要です。
よくある手法としてレコードにおける情報の範囲によって定義するという方法があります。(例えばユーザー名がA~D)
このシャーディングキーは任意のカラムと等しくない読み込みが発生するため、慎重に選ぶ必要があります。(例えば多くの人々の名前はZよりもCから始まる) 多くのリクエストを他のシャードよりも受け取るシャードのことを ホットスポット とよびこれは避けなければなりません。一度分割したものを再度シャーディングしなおすことは信じられないほど大変コストがかかるもので、FourSquareの11時間の障害のように多くのダウンタイムを引き起こすことになります。</description>
    </item>
    
  </channel>
</rss>