<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on ryosan-470 Blog</title>
    <link>https://ryosan-470.github.io/tags/testing/</link>
    <description>Recent content in testing on ryosan-470 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 24 Nov 2019 18:58:53 +0900</lastBuildDate>
    
	<atom:link href="https://ryosan-470.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test Flakiness – Methods for identifying and dealing with flaky tests</title>
      <link>https://ryosan-470.github.io/posts/test_flakiness/</link>
      <pubDate>Sun, 24 Nov 2019 18:58:53 +0900</pubDate>
      
      <guid>https://ryosan-470.github.io/posts/test_flakiness/</guid>
      <description>Spotifyのエンジニアリングブログより。CIで起きる時折ランダムに落ちるようなテストのことをFlakyなテストとよびそれらについて、さらにその原因やSpotifyではどのように対処しているか、書かれている
 Test Flakiness – Methods for identifying and dealing with flaky tests https://labs.spotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/
2019年9月12日、私はトロントで開かれた、Assert(JS) で Spotify におけるテスト Flakiness と、flakiness に対応するために長年に渡って構築してきたシステムのいくつかについて発表しました。
Assert(JS) はウェブシステムにおける完全自動化テストを専門とするカンファレンスで開催されて2年目になります。このカンファレンスは自動化テストの世界で広く知られている、Kent Dodds、Justin Searls、Aaron Abramov、James ShoreとIsaac Schlueterがスピーカーとして開催されているイベントです。
テスト flakiness とはなにか? flakyなテスト (訳注: 以降は不安定なテスト と訳します) とは、コードの変更がないのにも関わらず定期的に成功したり失敗したりするテストのことを指しています。不安定なテストは間違いなく迷惑であり、エンジニアはCIでビルド全体を再トリガーする必要があり、多くの場合新しいビルドが正常に完了するのを待つことに多くの時間を要するため、非常にコストがかかるものになります。
しかし実際の不安定なテストによる損失は、テストに対する信頼性の欠如にあります。テストに自信がない場合、テストを行わないチームよりも優位な立場にあります。不安定なテストは自信を持って継続的に配信する能力に大きく影響します。
flakinessの原因 不安定なテストの原因は多く存在しますが、私の講演では以下を強調して話します。
 一貫性のないアサーションのタイミング アプリケーションの状態がテスト実行中に一貫性がない場合、expect/assert ステートメントがランダムに失敗するということに気づくでしょう。これに対する修正は、アサーションが一貫した状態になるのを待ってからアサートするようにテストを構築することです。そのテストが一貫した状態になるまで「待機」するステートメントについては話しません。アサートできる既知の良好な状態に達するまで、アプリケーションの状態をポーリングするための述語を用意する必要があります。 テスト順序の依存 グローバル状態はテストが他のテストに依存する主な原因です。テストを単独で実行できずスイート全体が実行されたときのみテストが成功する場合、この問題が発生しています。解決策としては各テストの実行の間に完全に状態をリセットしグローバル状態への依存性をへらすことにあります。 エンドツーエンドテスト エンドツーエンドテストは本質的に不安定です。 Write fewer of them. Instead of having 500 end to end tests for your organization, have 5.  Spotifyでの不安定なテストのトラッキング 長年に渡ってSpotifyではエンジニアリング組織全体に渡ってかなり不安定なテストを削減することに貢献したシステムを構築しました。以下にいくつかツールについての説明を共有します。
Odeneye OdeneyeはSpotifyにおけるテストスイートの可視化と不安定なテストとインフラストラクチャの問題の両者を見分けるためのシステムです。下記にあるイメージを見てください。縦にはそれぞれのテストが並び、横にCIにおけるこれらのテストの結果が表示されています。オレンジ色の点は不安定なテストを示しています。障害の実線が表示されている場合、これは通常ネットワーク障害などのインフラストラクチャの問題やその性質を示しています。このようなビューは不安定なテストやインフラストラクチャの問題を特定するために役立つ素晴らしい方法です。</description>
    </item>
    
  </channel>
</rss>